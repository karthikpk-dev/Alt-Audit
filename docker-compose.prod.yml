version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: alt-audit-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-alt_audit}
      POSTGRES_USER: ${POSTGRES_USER:-alt_audit}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    ports:
      - "5432:5432"
    networks:
      - alt-audit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-alt_audit} -d ${POSTGRES_DB:-alt_audit}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: alt-audit-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - alt-audit-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: alt-audit-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-alt_audit}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-alt_audit}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      API_V1_STR: ${API_V1_STR:-/api/v1}
      PROJECT_NAME: ${PROJECT_NAME:-Alt Audit}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      RATE_LIMIT_PER_MINUTE: ${RATE_LIMIT_PER_MINUTE:-60}
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - alt-audit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: alt-audit-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000/api/v1}
    depends_on:
      - backend
    networks:
      - alt-audit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: alt-audit-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - alt-audit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Database backup service
  backup:
    image: postgres:15-alpine
    container_name: alt-audit-backup
    restart: "no"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-alt_audit}
      POSTGRES_USER: ${POSTGRES_USER:-alt_audit}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backup:/backup
    command: |
      sh -c "
        echo 'Starting backup...' &&
        pg_dump -h postgres -U ${POSTGRES_USER:-alt_audit} -d ${POSTGRES_DB:-alt_audit} > /backup/backup_$$(date +%Y%m%d_%H%M%S).sql &&
        echo 'Backup completed'
      "
    depends_on:
      - postgres
    networks:
      - alt-audit-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  alt-audit-network:
    driver: bridge
